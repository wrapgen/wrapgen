// Code generated by WrapGen. DO NOT EDIT.
package embedded

import (
	"time"

	"github.com/wrapgen/wrapgen/testdata/examples/embedded/otherPkg"

	"github.com/prometheus/client_golang/prometheus"
)

type intfWithPrometheus struct {
	base intf
	metric prometheus.ObserverVec
	instanceName string
}

// NewintfWithPrometheus returns an instance of the intf decorated with prometheus summary metric.
func NewintfWithPrometheus(base intf, metric prometheus.ObserverVec, instanceName string) *intfWithPrometheus {
	return &intfWithPrometheus{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *intfWithPrometheus) Abcdef() (out0 float64) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Abcdef", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Abcdef()
}


func (_d *intfWithPrometheus) Foo(x otherPkg.Bar) (err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		_d.metric.WithLabelValues(_d.instanceName, "Foo", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Foo(x)
}



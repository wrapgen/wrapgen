// Code generated by WrapGen. DO NOT EDIT.
package embedded

import (
	"reflect"

	"github.com/wrapgen/wrapgen/testdata/examples/embedded/otherPkg"

	"go.uber.org/mock/gomock"
)

// Mockintf is a mock of intf interface.
type Mockintf struct {
	ctrl     *gomock.Controller
	recorder *MockintfMockRecorder
}

// MockintfMockRecorder is the mock recorder for Mockintf.
type MockintfMockRecorder struct {
	mock *Mockintf
}

// NewMockintf creates a new mock instance.
func NewMockintf(ctrl *gomock.Controller) *Mockintf {
	mock := &Mockintf{ctrl: ctrl}
	mock.recorder = &MockintfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockintf) EXPECT() *MockintfMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *Mockintf) ISGOMOCK() struct{} {
	return struct{}{}
}

// Abcdef mocks base method.
func (m *Mockintf) Abcdef() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abcdef")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Abcdef indicates an expected call of Abcdef.
func (mr *MockintfMockRecorder) Abcdef() *intfAbcdefCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abcdef", reflect.TypeOf((*Mockintf)(nil).Abcdef))
	return &intfAbcdefCall{Call: call}
}

// intfAbcdefCall wrap *gomock.Call
type intfAbcdefCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *intfAbcdefCall) Return(arg0 float64) *intfAbcdefCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *intfAbcdefCall) Do(f func() float64) *intfAbcdefCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *intfAbcdefCall) DoAndReturn(f func() float64) *intfAbcdefCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Foo mocks base method.
func (m *Mockintf) Foo(x otherPkg.Bar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", x)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockintfMockRecorder) Foo(x any) *intfFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*Mockintf)(nil).Foo), x)
	return &intfFooCall{Call: call}
}

// intfFooCall wrap *gomock.Call
type intfFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *intfFooCall) Return(arg0 error) *intfFooCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *intfFooCall) Do(f func(otherPkg.Bar) error) *intfFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *intfFooCall) DoAndReturn(f func(otherPkg.Bar) error) *intfFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by WrapGen. DO NOT EDIT.
package fancyTypes

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockTest is a mock of Test interface.
type MockTest struct {
	ctrl     *gomock.Controller
	recorder *MockTestMockRecorder
}

// MockTestMockRecorder is the mock recorder for MockTest.
type MockTestMockRecorder struct {
	mock *MockTest
}

// NewMockTest creates a new mock instance.
func NewMockTest(ctrl *gomock.Controller) *MockTest {
	mock := &MockTest{ctrl: ctrl}
	mock.recorder = &MockTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest) EXPECT() *MockTestMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockTest) ISGOMOCK() struct{} {
	return struct{}{}
}

// TestChan mocks base method.
func (m *MockTest) TestChan(a <-chan struct{}, b chan<- struct{}, c chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestChan", a, b, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestChan indicates an expected call of TestChan.
func (mr *MockTestMockRecorder) TestChan(a, b, c any) *TestTestChanCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestChan", reflect.TypeOf((*MockTest)(nil).TestChan), a, b, c)
	return &TestTestChanCall{Call: call}
}

// TestTestChanCall wrap *gomock.Call
type TestTestChanCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TestTestChanCall) Return(arg0 error) *TestTestChanCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TestTestChanCall) Do(f func(<-chan struct{}, chan<- struct{}, chan struct{}) error) *TestTestChanCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TestTestChanCall) DoAndReturn(f func(<-chan struct{}, chan<- struct{}, chan struct{}) error) *TestTestChanCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TestFunc mocks base method.
func (m *MockTest) TestFunc(f func(int32) func(error) int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TestFunc", f)
}

// TestFunc indicates an expected call of TestFunc.
func (mr *MockTestMockRecorder) TestFunc(f any) *TestTestFuncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestFunc", reflect.TypeOf((*MockTest)(nil).TestFunc), f)
	return &TestTestFuncCall{Call: call}
}

// TestTestFuncCall wrap *gomock.Call
type TestTestFuncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TestTestFuncCall) Return() *TestTestFuncCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TestTestFuncCall) Do(f func(func(int32) func(error) int)) *TestTestFuncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TestTestFuncCall) DoAndReturn(f func(func(int32) func(error) int)) *TestTestFuncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TestPointer mocks base method.
func (m *MockTest) TestPointer(a *int32) *struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestPointer", a)
	ret0, _ := ret[0].(*struct{})
	return ret0
}

// TestPointer indicates an expected call of TestPointer.
func (mr *MockTestMockRecorder) TestPointer(a any) *TestTestPointerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestPointer", reflect.TypeOf((*MockTest)(nil).TestPointer), a)
	return &TestTestPointerCall{Call: call}
}

// TestTestPointerCall wrap *gomock.Call
type TestTestPointerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TestTestPointerCall) Return(arg0 *struct{}) *TestTestPointerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TestTestPointerCall) Do(f func(*int32) *struct{}) *TestTestPointerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TestTestPointerCall) DoAndReturn(f func(*int32) *struct{}) *TestTestPointerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TestSlice mocks base method.
func (m *MockTest) TestSlice(arg0 [][][]map[string]int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TestSlice", arg0)
}

// TestSlice indicates an expected call of TestSlice.
func (mr *MockTestMockRecorder) TestSlice(arg0 any) *TestTestSliceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSlice", reflect.TypeOf((*MockTest)(nil).TestSlice), arg0)
	return &TestTestSliceCall{Call: call}
}

// TestTestSliceCall wrap *gomock.Call
type TestTestSliceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TestTestSliceCall) Return() *TestTestSliceCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TestTestSliceCall) Do(f func([][][]map[string]int)) *TestTestSliceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TestTestSliceCall) DoAndReturn(f func([][][]map[string]int)) *TestTestSliceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

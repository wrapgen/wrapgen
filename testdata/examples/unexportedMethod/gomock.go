// Code generated by WrapGen. DO NOT EDIT.
package unexportedMethod

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// Mockexample is a mock of example interface.
type Mockexample struct {
	ctrl     *gomock.Controller
	recorder *MockexampleMockRecorder
}

// MockexampleMockRecorder is the mock recorder for Mockexample.
type MockexampleMockRecorder struct {
	mock *Mockexample
}

// NewMockexample creates a new mock instance.
func NewMockexample(ctrl *gomock.Controller) *Mockexample {
	mock := &Mockexample{ctrl: ctrl}
	mock.recorder = &MockexampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockexample) EXPECT() *MockexampleMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *Mockexample) ISGOMOCK() struct{} {
	return struct{}{}
}

// unexportedMethod mocks base method.
func (m *Mockexample) unexportedMethod(test unexportedType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "unexportedMethod", test)
}

// unexportedMethod indicates an expected call of unexportedMethod.
func (mr *MockexampleMockRecorder) unexportedMethod(test any) *exampleunexportedMethodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unexportedMethod", reflect.TypeOf((*Mockexample)(nil).unexportedMethod), test)
	return &exampleunexportedMethodCall{Call: call}
}

// exampleunexportedMethodCall wrap *gomock.Call
type exampleunexportedMethodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *exampleunexportedMethodCall) Return() *exampleunexportedMethodCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *exampleunexportedMethodCall) Do(f func(unexportedType)) *exampleunexportedMethodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *exampleunexportedMethodCall) DoAndReturn(f func(unexportedType)) *exampleunexportedMethodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

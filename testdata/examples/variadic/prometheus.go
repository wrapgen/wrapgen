// Code generated by WrapGen. DO NOT EDIT.
package variadic

import (
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

type VariadicParametersWithPrometheus struct {
	base VariadicParameters
	metric prometheus.ObserverVec
	instanceName string
}

// NewVariadicParametersWithPrometheus returns an instance of the VariadicParameters decorated with prometheus summary metric.
func NewVariadicParametersWithPrometheus(base VariadicParameters, metric prometheus.ObserverVec, instanceName string) *VariadicParametersWithPrometheus {
	return &VariadicParametersWithPrometheus{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *VariadicParametersWithPrometheus) Test1(a ...int) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Test1", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Test1(a...)
}


func (_d *VariadicParametersWithPrometheus) Test2(b ...B) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Test2", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Test2(b...)
}


func (_d *VariadicParametersWithPrometheus) Test3(c ...http.Request) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Test3", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Test3(c...)
}



// Code generated by WrapGen. DO NOT EDIT.
package constArrayLength

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

type IWithPrometheus struct {
	base I
	metric prometheus.ObserverVec
	instanceName string
}

// NewIWithPrometheus returns an instance of the I decorated with prometheus summary metric.
func NewIWithPrometheus(base I, metric prometheus.ObserverVec, instanceName string) *IWithPrometheus {
	return &IWithPrometheus{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *IWithPrometheus) Bar() (out0 [2]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Bar", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Bar()
}


func (_d *IWithPrometheus) Baz() (out0 [127]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Baz", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Baz()
}


func (_d *IWithPrometheus) Corge() (out0 [7]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Corge", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Corge()
}


func (_d *IWithPrometheus) Foo() (out0 [2]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Foo", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Foo()
}


func (_d *IWithPrometheus) Quux() (out0 [3]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Quux", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Quux()
}


func (_d *IWithPrometheus) Qux() (out0 [3]int) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Qux", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Qux()
}



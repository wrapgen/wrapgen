// Code generated by WrapGen. DO NOT EDIT.
package xtest_test

import (
	"reflect"

	"github.com/wrapgen/wrapgen/testdata/examples/gomock/xtest"

	"go.uber.org/mock/gomock"
)

// MockFooXTest is a mock of FooXTest interface.
type MockFooXTest struct {
	ctrl     *gomock.Controller
	recorder *MockFooXTestMockRecorder
}

// MockFooXTestMockRecorder is the mock recorder for MockFooXTest.
type MockFooXTestMockRecorder struct {
	mock *MockFooXTest
}

// NewMockFooXTest creates a new mock instance.
func NewMockFooXTest(ctrl *gomock.Controller) *MockFooXTest {
	mock := &MockFooXTest{ctrl: ctrl}
	mock.recorder = &MockFooXTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFooXTest) EXPECT() *MockFooXTestMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockFooXTest) ISGOMOCK() struct{} {
	return struct{}{}
}

// Foo mocks base method.
func (m *MockFooXTest) Foo(v1 xtest.TestXType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo", v1)
}

// Foo indicates an expected call of Foo.
func (mr *MockFooXTestMockRecorder) Foo(v1 any) *FooXTestFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockFooXTest)(nil).Foo), v1)
	return &FooXTestFooCall{Call: call}
}

// FooXTestFooCall wrap *gomock.Call
type FooXTestFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FooXTestFooCall) Return() *FooXTestFooCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FooXTestFooCall) Do(f func(xtest.TestXType)) *FooXTestFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FooXTestFooCall) DoAndReturn(f func(xtest.TestXType)) *FooXTestFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Code generated by WrapGen. DO NOT EDIT.
package xtest

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockBlaTest is a mock of BlaTest interface.
type MockBlaTest struct {
	ctrl     *gomock.Controller
	recorder *MockBlaTestMockRecorder
}

// MockBlaTestMockRecorder is the mock recorder for MockBlaTest.
type MockBlaTestMockRecorder struct {
	mock *MockBlaTest
}

// NewMockBlaTest creates a new mock instance.
func NewMockBlaTest(ctrl *gomock.Controller) *MockBlaTest {
	mock := &MockBlaTest{ctrl: ctrl}
	mock.recorder = &MockBlaTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlaTest) EXPECT() *MockBlaTestMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockBlaTest) ISGOMOCK() struct{} {
	return struct{}{}
}

// Foo mocks base method.
func (m *MockBlaTest) Foo(v1 X) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo", v1)
}

// Foo indicates an expected call of Foo.
func (mr *MockBlaTestMockRecorder) Foo(v1 any) *BlaTestFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockBlaTest)(nil).Foo), v1)
	return &BlaTestFooCall{Call: call}
}

// BlaTestFooCall wrap *gomock.Call
type BlaTestFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BlaTestFooCall) Return() *BlaTestFooCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BlaTestFooCall) Do(f func(X)) *BlaTestFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BlaTestFooCall) DoAndReturn(f func(X)) *BlaTestFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

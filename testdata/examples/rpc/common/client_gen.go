// Code generated by WrapGen. DO NOT EDIT.
package common

import (
	"context"
	"net/rpc"
)


// ArithClient is a toy RPC client for interface Arith.
type ArithClient struct {
    Client *rpc.Client
}


func (_c *ArithClient) Divide(ctx context.Context, arg *Args) (*Quotient, error) {
    var reply Quotient
    call := _c.Client.Go("Arith.Multiply", arg, &reply, nil)
    select {
    case <-ctx.Done():
        return nil, ctx.Err()
    case <-call.Done:
        return &reply, call.Error
    }
}

func (_c *ArithClient) Multiply(ctx context.Context, arg *Args) (*int, error) {
    var reply int
    call := _c.Client.Go("Arith.Multiply", arg, &reply, nil)
    select {
    case <-ctx.Done():
        return nil, ctx.Err()
    case <-call.Done:
        return &reply, call.Error
    }
}

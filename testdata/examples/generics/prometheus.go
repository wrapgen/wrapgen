// Code generated by WrapGen. DO NOT EDIT.
package generics

import (
	"time"

	"github.com/wrapgen/wrapgen/testdata/examples/gomock/generics/otherPackage"

	"github.com/prometheus/client_golang/prometheus"
)

type Test123WithPrometheus[T comparable] struct {
	base testInterface1[T]
	metric prometheus.ObserverVec
	instanceName string
}

// NewTest123WithPrometheus returns an instance of the testInterface1[T] decorated with prometheus summary metric.
func NewTest123WithPrometheus[T comparable](base testInterface1[T], metric prometheus.ObserverVec, instanceName string) *Test123WithPrometheus[T] {
	return &Test123WithPrometheus[T]{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *Test123WithPrometheus[T]) Equal(a T, b T) (out0 bool) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Equal", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Equal(a, b)
}



type testInterfaceGenericParametersWithPrometheus[T comparable] struct {
	base testInterfaceGenericParameters[T]
	metric prometheus.ObserverVec
	instanceName string
}

// NewtestInterfaceGenericParametersWithPrometheus returns an instance of the testInterfaceGenericParameters[T] decorated with prometheus summary metric.
func NewtestInterfaceGenericParametersWithPrometheus[T comparable](base testInterfaceGenericParameters[T], metric prometheus.ObserverVec, instanceName string) *testInterfaceGenericParametersWithPrometheus[T] {
	return &testInterfaceGenericParametersWithPrometheus[T]{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Bar(a otherPackage.TestStruct[T]) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Bar", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Bar(a)
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Baz(a otherPackage.TestStruct[int]) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Baz", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Baz(a)
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Foo(a testInterface1[T]) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Foo", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Foo(a)
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Quuux() (out0 TestType[T, T, T]) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Quuux", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Quuux()
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Quux() (out0 otherPackage.TestInterface[T]) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Quux", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Quux()
}


func (_d *testInterfaceGenericParametersWithPrometheus[T]) Qux(a otherPackage.TestInterface[T]) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Qux", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.Qux(a)
}



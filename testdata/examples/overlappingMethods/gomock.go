// Code generated by WrapGen. DO NOT EDIT.
package overlappingMethods

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockReadWriteCloser is a mock of ReadWriteCloser interface.
type MockReadWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteCloserMockRecorder
}

// MockReadWriteCloserMockRecorder is the mock recorder for MockReadWriteCloser.
type MockReadWriteCloserMockRecorder struct {
	mock *MockReadWriteCloser
}

// NewMockReadWriteCloser creates a new mock instance.
func NewMockReadWriteCloser(ctrl *gomock.Controller) *MockReadWriteCloser {
	mock := &MockReadWriteCloser{ctrl: ctrl}
	mock.recorder = &MockReadWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteCloser) EXPECT() *MockReadWriteCloserMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockReadWriteCloser) ISGOMOCK() struct{} {
	return struct{}{}
}

// Close mocks base method.
func (m *MockReadWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadWriteCloserMockRecorder) Close() *ReadWriteCloserCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteCloser)(nil).Close))
	return &ReadWriteCloserCloseCall{Call: call}
}

// ReadWriteCloserCloseCall wrap *gomock.Call
type ReadWriteCloserCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReadWriteCloserCloseCall) Return(arg0 error) *ReadWriteCloserCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReadWriteCloserCloseCall) Do(f func() error) *ReadWriteCloserCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReadWriteCloserCloseCall) DoAndReturn(f func() error) *ReadWriteCloserCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockReadWriteCloser) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReadWriteCloserMockRecorder) Read(arg0 any) *ReadWriteCloserReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReadWriteCloser)(nil).Read), arg0)
	return &ReadWriteCloserReadCall{Call: call}
}

// ReadWriteCloserReadCall wrap *gomock.Call
type ReadWriteCloserReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReadWriteCloserReadCall) Return(arg0 int, arg1 error) *ReadWriteCloserReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReadWriteCloserReadCall) Do(f func([]byte) (int, error)) *ReadWriteCloserReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReadWriteCloserReadCall) DoAndReturn(f func([]byte) (int, error)) *ReadWriteCloserReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockReadWriteCloser) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockReadWriteCloserMockRecorder) Write(arg0 any) *ReadWriteCloserWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockReadWriteCloser)(nil).Write), arg0)
	return &ReadWriteCloserWriteCall{Call: call}
}

// ReadWriteCloserWriteCall wrap *gomock.Call
type ReadWriteCloserWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ReadWriteCloserWriteCall) Return(arg0 int, arg1 error) *ReadWriteCloserWriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ReadWriteCloserWriteCall) Do(f func([]byte) (int, error)) *ReadWriteCloserWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ReadWriteCloserWriteCall) DoAndReturn(f func([]byte) (int, error)) *ReadWriteCloserWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

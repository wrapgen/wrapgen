// Code generated by WrapGen. DO NOT EDIT.
package embeddedStd

import (
	"net/http"
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockIntf1 is a mock of Intf1 interface.
type MockIntf1 struct {
	ctrl     *gomock.Controller
	recorder *MockIntf1MockRecorder
}

// MockIntf1MockRecorder is the mock recorder for MockIntf1.
type MockIntf1MockRecorder struct {
	mock *MockIntf1
}

// NewMockIntf1 creates a new mock instance.
func NewMockIntf1(ctrl *gomock.Controller) *MockIntf1 {
	mock := &MockIntf1{ctrl: ctrl}
	mock.recorder = &MockIntf1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntf1) EXPECT() *MockIntf1MockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockIntf1) ISGOMOCK() struct{} {
	return struct{}{}
}

// Header mocks base method.
func (m *MockIntf1) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockIntf1MockRecorder) Header() *Intf1HeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIntf1)(nil).Header))
	return &Intf1HeaderCall{Call: call}
}

// Intf1HeaderCall wrap *gomock.Call
type Intf1HeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf1HeaderCall) Return(arg0 http.Header) *Intf1HeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf1HeaderCall) Do(f func() http.Header) *Intf1HeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf1HeaderCall) DoAndReturn(f func() http.Header) *Intf1HeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockIntf1) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIntf1MockRecorder) Write(arg0 any) *Intf1WriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIntf1)(nil).Write), arg0)
	return &Intf1WriteCall{Call: call}
}

// Intf1WriteCall wrap *gomock.Call
type Intf1WriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf1WriteCall) Return(arg0 int, arg1 error) *Intf1WriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf1WriteCall) Do(f func([]byte) (int, error)) *Intf1WriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf1WriteCall) DoAndReturn(f func([]byte) (int, error)) *Intf1WriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteHeader mocks base method.
func (m *MockIntf1) WriteHeader(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", statusCode)
}

// WriteHeader indicates an expected call of WriteHeader.
func (mr *MockIntf1MockRecorder) WriteHeader(statusCode any) *Intf1WriteHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockIntf1)(nil).WriteHeader), statusCode)
	return &Intf1WriteHeaderCall{Call: call}
}

// Intf1WriteHeaderCall wrap *gomock.Call
type Intf1WriteHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf1WriteHeaderCall) Return() *Intf1WriteHeaderCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf1WriteHeaderCall) Do(f func(int)) *Intf1WriteHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf1WriteHeaderCall) DoAndReturn(f func(int)) *Intf1WriteHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

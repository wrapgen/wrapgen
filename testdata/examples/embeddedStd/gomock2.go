// Code generated by WrapGen. DO NOT EDIT.
package embeddedStd

import (
	"net/http"
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockIntf2 is a mock of Intf2 interface.
type MockIntf2 struct {
	ctrl     *gomock.Controller
	recorder *MockIntf2MockRecorder
}

// MockIntf2MockRecorder is the mock recorder for MockIntf2.
type MockIntf2MockRecorder struct {
	mock *MockIntf2
}

// NewMockIntf2 creates a new mock instance.
func NewMockIntf2(ctrl *gomock.Controller) *MockIntf2 {
	mock := &MockIntf2{ctrl: ctrl}
	mock.recorder = &MockIntf2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntf2) EXPECT() *MockIntf2MockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockIntf2) ISGOMOCK() struct{} {
	return struct{}{}
}

// Header mocks base method.
func (m *MockIntf2) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockIntf2MockRecorder) Header() *Intf2HeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockIntf2)(nil).Header))
	return &Intf2HeaderCall{Call: call}
}

// Intf2HeaderCall wrap *gomock.Call
type Intf2HeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf2HeaderCall) Return(arg0 http.Header) *Intf2HeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf2HeaderCall) Do(f func() http.Header) *Intf2HeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf2HeaderCall) DoAndReturn(f func() http.Header) *Intf2HeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockIntf2) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIntf2MockRecorder) Write(arg0 any) *Intf2WriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIntf2)(nil).Write), arg0)
	return &Intf2WriteCall{Call: call}
}

// Intf2WriteCall wrap *gomock.Call
type Intf2WriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf2WriteCall) Return(arg0 int, arg1 error) *Intf2WriteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf2WriteCall) Do(f func([]byte) (int, error)) *Intf2WriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf2WriteCall) DoAndReturn(f func([]byte) (int, error)) *Intf2WriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WriteHeader mocks base method.
func (m *MockIntf2) WriteHeader(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", statusCode)
}

// WriteHeader indicates an expected call of WriteHeader.
func (mr *MockIntf2MockRecorder) WriteHeader(statusCode any) *Intf2WriteHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockIntf2)(nil).WriteHeader), statusCode)
	return &Intf2WriteHeaderCall{Call: call}
}

// Intf2WriteHeaderCall wrap *gomock.Call
type Intf2WriteHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *Intf2WriteHeaderCall) Return() *Intf2WriteHeaderCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *Intf2WriteHeaderCall) Do(f func(int)) *Intf2WriteHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *Intf2WriteHeaderCall) DoAndReturn(f func(int)) *Intf2WriteHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

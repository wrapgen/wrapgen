// Code generated by WrapGen. DO NOT EDIT.
package embeddedStd

import (
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

type Intf1WithPrometheus struct {
	base testInterface
	metric prometheus.ObserverVec
	instanceName string
}

// NewIntf1WithPrometheus returns an instance of the testInterface decorated with prometheus summary metric.
func NewIntf1WithPrometheus(base testInterface, metric prometheus.ObserverVec, instanceName string) *Intf1WithPrometheus {
	return &Intf1WithPrometheus{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}


func (_d *Intf1WithPrometheus) Header() (out0 http.Header) {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "Header", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Header()
}


func (_d *Intf1WithPrometheus) Write(arg0 []byte) (out0 int, err error) {
	_since := time.Now()
	defer func() {
		result := "ok"
		if err != nil {
			result = "error"
		}

		_d.metric.WithLabelValues(_d.instanceName, "Write", result).Observe(time.Since(_since).Seconds())
	}()
	return _d.base.Write(arg0)
}


func (_d *Intf1WithPrometheus) WriteHeader(statusCode int) () {
	_since := time.Now()
	defer func() {
		result := "ok"
		_d.metric.WithLabelValues(_d.instanceName, "WriteHeader", result).Observe(time.Since(_since).Seconds())
	}()
	_d.base.WriteHeader(statusCode)
}



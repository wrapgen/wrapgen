// Code generated by WrapGen. DO NOT EDIT.
package packageB

import (
	"sync"
)


// TestBMock is a mock implementation of TestB.
type TestBMock struct {
	// FooFunc mocks the Foo method.
	FooFunc func() B

	// calls tracks calls to the methods.
	calls struct {
		// Foo holds details about calls to the Foo method.
		Foo []struct {
		}
	}
	lockFoo sync.RWMutex
}


// Foo calls FooFunc.
func (mock *TestBMock) Foo() B {
	if mock.FooFunc == nil {
		panic("TestBMock.FooFunc: method is nil but TestB.Foo was just called")
	}
	callInfo := struct {
	}{
	}
	mock.lockFoo.Lock()
	mock.calls.Foo = append(mock.calls.Foo, callInfo)
	mock.lockFoo.Unlock()
	return mock.FooFunc()
}

// Foo gets all the calls that were made to Foo.
// Check the length with:
//     len(TestBMock.FooCalls())
func (mock *TestBMock) FooCalls() []struct{
} {
    mock.lockFoo.RLock()
    defer mock.lockFoo.RUnlock()
    return mock.calls.Foo
}


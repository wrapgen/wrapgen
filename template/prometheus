type {{.Name}}WithPrometheus{{formatType .Interface.TypeParams}} struct {
	base {{ formatType .Interface }}
	metric {{ import "github.com/prometheus/client_golang/prometheus" }}.ObserverVec
	instanceName string
}

// New{{.Name}}WithPrometheus returns an instance of the {{ formatType .Interface }} decorated with prometheus summary metric.
func New{{.Name}}WithPrometheus{{formatType .Interface.TypeParams}}(base {{ formatType .Interface }}, metric {{ import "github.com/prometheus/client_golang/prometheus" }}.ObserverVec, instanceName string) *{{$.Name}}WithPrometheus{{ typeParameterNames .Interface }} {
	return &{{.Name}}WithPrometheus{{ typeParameterNames .Interface  }}{
		base: base,
		metric: metric,
		instanceName: instanceName,
	}
}

{{ range $method := $.Interface.AllMethods }}
func (_d *{{$.Name}}WithPrometheus{{ typeParameterNames $.Interface }}) {{$method.Name}}({{parametersIn "arg" $method}}) ({{ parametersOut "out" $method }}) {
	_since := {{ import "time" }}.Now()
	defer func() {
		result := "ok"
		{{- if and (ne 0 (len $method.Out)) (eq (last (parameterNames "" $method.Out)) "err") }}
		if err != nil {
			result = "error"
		}
{{end}}
		_d.metric.WithLabelValues(_d.instanceName, "{{$method.Name}}", result).Observe(time.Since(_since).Seconds())
	}()
	{{ if ne 0 (len $method.Out) }}return {{ end }}_d.base.{{$method.Name}}({{ parametersInNamesUnpackVariadic "arg" $method }})
}

{{ end }}

{{- $mockName := printf "Mock%s" .Name }}
{{- if hasKey .Vars "name" }}{{ $mockName = .Vars.name }}{{ end -}}
// {{$mockName}} is a mock of {{.Name}} interface.
type {{$mockName}}{{ typeParameters $.Interface }} struct {
	ctrl     *{{ import "go.uber.org/mock/gomock" }}.Controller
	recorder *{{$mockName}}MockRecorder{{ typeParameterNames $.Interface }}
}

// {{$mockName}}MockRecorder is the mock recorder for {{$mockName}}.
type {{$mockName}}MockRecorder{{ typeParameters $.Interface }} struct {
	mock *{{$mockName}}{{ typeParameterNames $.Interface }}
}

// New{{$mockName}} creates a new mock instance.
func New{{$mockName}}{{ typeParameters $.Interface }}(ctrl *{{ import "go.uber.org/mock/gomock" }}.Controller) *{{$mockName}}{{ typeParameterNames $.Interface }} {
	mock := &{{ $mockName }}{{ typeParameterNames $.Interface }}{ctrl: ctrl}
	mock.recorder = &{{$mockName}}MockRecorder{{ typeParameterNames $.Interface }}{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *{{$mockName}}{{ typeParameterNames $.Interface }}) EXPECT() *{{$mockName}}MockRecorder{{ typeParameterNames $.Interface }} {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *{{$mockName}}{{ typeParameterNames $.Interface }}) ISGOMOCK() struct{} {
	return struct{}{}
}
{{ range $method := $.Interface.AllMethods }}
// {{$method.Name}} mocks base method.
{{- $receiver := uniqueIdentifier "m" $method }}
func ({{$receiver}} *{{$mockName}}{{ typeParameterNames $.Interface }}) {{$method.Name}}({{parametersIn "arg" $method}}){{ parametersOutTypes $method }} {
	{{$receiver}}.ctrl.T.Helper()
	{{- $params := list "m" (printf "\"%s\"" $method.Name) }}
	{{- if $method.Variadic }}
	varargs := []any{ {{- join ", " (parameterNames "arg" $method.In) -}} }
	for _, a := range {{ index (parametersInNames "arg" $method) (len $method.In) }} {
		varargs = append(varargs, a)
	}
	{{- $params = push $params "varargs..." }}
	{{- else }}
	{{- $params = concat $params (parametersInNames "arg" $method) }}
	{{- end }}
	{{ if ne 0 (len $method.Out) }}ret := {{ end }}{{$receiver}}.ctrl.Call({{ join ", " $params }})
    {{- $returnVariables := list }}
	{{- range $paramIndex, $_ := parameterNames "ret" $method.Out }}
    {{- $returnVariables = push $returnVariables (printf "ret%d" $paramIndex) }}
	ret{{$paramIndex}}, _ := ret[{{$paramIndex}}].({{ formatType (index $method.Out $paramIndex).Type }})
	{{- end }}
	{{ if ne 0 (len $method.Out) }}return {{ join ", " $returnVariables }}{{ end }}
}

// {{$method.Name}} indicates an expected call of {{$method.Name}}.
func (mr *{{$mockName}}MockRecorder{{ typeParameterNames $.Interface }}) {{$method.Name}}({{parametersInAnyType "arg" $method}}) *{{ import "go.uber.org/mock/gomock" }}.Call {
	mr.mock.ctrl.T.Helper()
	{{- if $method.Variadic }}
	varargs := append([]any{ {{- join ", " (parameterNames "arg" $method.In) -}} }, {{ parameterNameVariadic "arg" $method }}...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{ $method.Name }}", {{ import "reflect" }}.TypeOf((*{{$mockName}}{{ typeParameterNames $.Interface }})(nil).{{ $method.Name }}), varargs...)
	{{- else }}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{ $method.Name }}", {{ import "reflect" }}.TypeOf((*{{$mockName}}{{ typeParameterNames $.Interface }})(nil).{{ $method.Name }}),  {{ join ", " (parametersInNames "arg" $method ) }})
	{{- end }}
}

{{ end -}}
